<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--开启注解配置-->
    <!--定义扫描包，扫描package包及子包中添加注解的类，由IOC容器管理-->
    <context:component-scan  base-package="com.neuedu"></context:component-scan>
    <!-- 引入properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!-- c3p0带有连接池的数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath:com/neuedu/mapper/UserInfoMapper.xml" ></property>
        <property name="dataSource" ref="dataSource" ></property>
    </bean>
    <!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory" index="0"></constructor-arg>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <property name="dataSource" ref="dataSource" />
   </bean>


    <!--
    容器配置：
    通过spring ioc容器窗帘CategoryDaoImpl的实现类  - - - 》new CategoryDaoImpl()
    id:bean的名称  categoryDaoImpl =new CategoryDaoImpl();
    class:要创建的bean的class
    scope :prototype  singleton  request   session   globalsession

    依赖注入：bean的属性赋值
    属性的setter   底层调用set方法
    构造器注入  构造方法

    autowire=""   byName (id名)  byType（类型唯一）  constructor（找对应类型的构造方法）
    -->
<!--    <bean id="categoryDaoImpl" class="com.neuedu.dao.impl.CategoryDaoImpl" init-method="init" destroy-method="destory" scope="singleton"
    autowire="constructor">

       <property name="categoryId" value="1232" ></property>
       <property name="category" ref="category1" ></property>
        <constructor-arg index="0" value="22"></constructor-arg>


    </bean>-->

    <!--基于注解的配置@Resource-->
    <bean id="category" class="com.neuedu.pojo.Category"></bean>
    <!--<bean id="category2" class="com.neuedu.pojo.Category"></bean>-->
</beans>

